{"ast":null,"code":"var _jsxFileName = \"/Users/mike/Desktop/Myportfolio2019/client/src/components/contact.js\";\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nclass App extends React.Component {\n  render() {\n    return React.createElement(Formik, {\n      initialValues: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      validationSchema: Yup.object().shape({\n        firstName: Yup.string().required('First Name is required'),\n        lastName: Yup.string().required('Last Name is required'),\n        email: Yup.string().email('Email is invalid').required('Email is required'),\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\n        confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Confirm Password is required')\n      }),\n      onSubmit: fields => {\n        alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4));\n      },\n      render: ({\n        errors,\n        status,\n        touched\n      }) => React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"firstName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"First Name\"), React.createElement(Field, {\n        name: \"firstName\",\n        type: \"text\",\n        className: 'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"firstName\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"lastName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"Last Name\"), React.createElement(Field, {\n        name: \"lastName\",\n        type: \"text\",\n        className: 'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"lastName\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Email\"), React.createElement(Field, {\n        name: \"email\",\n        type: \"text\",\n        className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"email\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Password\"), React.createElement(Field, {\n        name: \"password\",\n        type: \"password\",\n        className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"password\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"confirmPassword\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Confirm Password\"), React.createElement(Field, {\n        name: \"confirmPassword\",\n        type: \"password\",\n        className: 'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"confirmPassword\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mr-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Register\"), React.createElement(\"button\", {\n        type: \"reset\",\n        className: \"btn btn-secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"Reset\"))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport { App };","map":{"version":3,"sources":["/Users/mike/Desktop/Myportfolio2019/client/src/components/contact.js"],"names":["React","Formik","Field","Form","ErrorMessage","Yup","App","Component","render","firstName","lastName","email","password","confirmPassword","object","shape","string","required","min","oneOf","ref","fields","alert","JSON","stringify","errors","status","touched"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Formik\n        initialValues={{\n          firstName: '',\n          lastName: '',\n          email: '',\n          password: '',\n          confirmPassword: ''\n        }}\n        validationSchema={Yup.object().shape({\n          firstName: Yup.string().required('First Name is required'),\n          lastName: Yup.string().required('Last Name is required'),\n          email: Yup.string()\n            .email('Email is invalid')\n            .required('Email is required'),\n          password: Yup.string()\n            .min(6, 'Password must be at least 6 characters')\n            .required('Password is required'),\n          confirmPassword: Yup.string()\n            .oneOf([Yup.ref('password'), null], 'Passwords must match')\n            .required('Confirm Password is required')\n        })}\n        onSubmit={fields => {\n          alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4));\n        }}\n        render={({ errors, status, touched }) => (\n          <Form>\n            <div className='form-group'>\n              <label htmlFor='firstName'>First Name</label>\n              <Field\n                name='firstName'\n                type='text'\n                className={\n                  'form-control' +\n                  (errors.firstName && touched.firstName ? ' is-invalid' : '')\n                }\n              />\n              <ErrorMessage\n                name='firstName'\n                component='div'\n                className='invalid-feedback'\n              />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='lastName'>Last Name</label>\n              <Field\n                name='lastName'\n                type='text'\n                className={\n                  'form-control' +\n                  (errors.lastName && touched.lastName ? ' is-invalid' : '')\n                }\n              />\n              <ErrorMessage\n                name='lastName'\n                component='div'\n                className='invalid-feedback'\n              />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='email'>Email</label>\n              <Field\n                name='email'\n                type='text'\n                className={\n                  'form-control' +\n                  (errors.email && touched.email ? ' is-invalid' : '')\n                }\n              />\n              <ErrorMessage\n                name='email'\n                component='div'\n                className='invalid-feedback'\n              />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='password'>Password</label>\n              <Field\n                name='password'\n                type='password'\n                className={\n                  'form-control' +\n                  (errors.password && touched.password ? ' is-invalid' : '')\n                }\n              />\n              <ErrorMessage\n                name='password'\n                component='div'\n                className='invalid-feedback'\n              />\n            </div>\n            <div className='form-group'>\n              <label htmlFor='confirmPassword'>Confirm Password</label>\n              <Field\n                name='confirmPassword'\n                type='password'\n                className={\n                  'form-control' +\n                  (errors.confirmPassword && touched.confirmPassword\n                    ? ' is-invalid'\n                    : '')\n                }\n              />\n              <ErrorMessage\n                name='confirmPassword'\n                component='div'\n                className='invalid-feedback'\n              />\n            </div>\n            <div className='form-group'>\n              <button type='submit' className='btn btn-primary mr-2'>\n                Register\n              </button>\n              <button type='reset' className='btn btn-secondary'>\n                Reset\n              </button>\n            </div>\n          </Form>\n        )}\n      />\n    );\n  }\n}\n\nexport { App };\n"]},"metadata":{},"sourceType":"module"}